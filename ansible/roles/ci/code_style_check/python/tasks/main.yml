---
# Playbook for Python code style check

- name: Get list of all Python files by extension in repository
  script: "../../common_resources/files/files_by_extension_and_policy.sh \
    {{repo_sources_path}} {{repo_sources_path}}/{{item.path}} py .lintignore"
  with_items: "{{repo_packages_list|default([])}}"
  register: python_files_with_extension

- name: Set variable to workaround ansible type evaluation issue
  set_fact:
    python_files_with_extension_results: "{{python_files_with_extension.results}}"

- name: Get list of all Python files by content in repository
  script: "../../common_resources/files/files_by_content_and_policy.sh \
    {{repo_sources_path}} {{repo_sources_path}}/{{item.path}} '^#!/usr/bin/env python|^#! /usr/bin/env python|^#!/usr/bin/python|^#! /usr/bin/python' .lintignore '.*\\..*'"
  with_items: "{{repo_packages_list|default([])}}"
  register: python_files_without_extension

- name: Set variable to workaround ansible type evaluation issue
  set_fact:
    python_files_without_extension_results: "{{python_files_without_extension.results}}"

- name: Execute roslint for every package and .py files and write results in unit tests format
  shell: "source /opt/ros/{{ros_release}}/setup.bash && \
    rosrun roslint test_wrapper \
      {{ros_workspace}}/build/test_results/{{item.item.name}}/roslint-python-py-{{item.item.name}}.xml \
      'rosrun roslint pep8 --max-line-length=120 {{item.stdout}}'"
  args:
    executable: "/bin/bash"
    chdir: "{{repo_sources_path}}/{{item.item.path}}"
  with_items: "{{python_files_with_extension_results|default([])}}"
  when: item.stdout != ""
  ignore_errors: True

- name: Execute roslint for every package and no extension files and write results in unit tests format
  shell: "source /opt/ros/{{ros_release}}/setup.bash && \
    rosrun roslint test_wrapper \
      {{ros_workspace}}/build/test_results/{{item.item.name}}/roslint-python-ex-{{item.item.name}}.xml \
      'rosrun roslint pep8 --max-line-length=120 {{item.stdout}}' "
  args:
    executable: "/bin/bash"
    chdir: "{{repo_sources_path}}/{{item.item.path}}"
  with_items: "{{python_files_without_extension_results|default([])}}"
  when: item.stdout != ""
  ignore_errors: True
