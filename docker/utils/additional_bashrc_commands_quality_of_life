#!/bin/bash
function confirm() {
	# call with a prompt string or use a default
	read -r -p "${1:-[y/N]} " response
	case "$response" in
		[yY][eE][sS]|[yY])
			echo "y"
			return 1
			;;
		*)
			echo "n"
			return 0
			;;
	esac
}

grep_all() { grep -rn '.' -e "$1"; }
docker_exec () { if [[ $(docker container ls -q | wc -l) -eq 1 ]]; then docker exec -it $(docker container ls -q) bash -c "su user"; else echo "wrong number of containers running"; fi; }
id_rsa_to_container() { 
  has_input_args=$(if [[ $(for i in $@; do echo $i; done | wc -l) -eq 0 ]]; then echo false; else echo true; fi)
  if [[ $has_input_args == 'true' ]]; then 
    for container in $@; do 
      docker exec -it $container bash -c "gosu user mkdir /home/user/.ssh"
      docker cp ~/.ssh/id_rsa ${container}:/home/user/.ssh/
    done
  else
    if [ $(which docker | wc -l) -eq 0 ] ; then
      echo "Docker not found. Are you on the host?"
      elif [ $(docker container ls -q | wc -l) -eq 0 ]; then
      echo "No currently running containers"
      elif [ $(docker container ls -q | wc -l) -eq 1 ]; then
      echo "Copying id_rsa to container $(docker container ls -q)"
      docker cp ~/.ssh/id_rsa $(docker container ls -q):/home/user/.ssh/
      elif [ $(docker container ls -q | wc -l) -gt 1 ]; then
      echo "More than one container is running"
    fi
  fi
}
git_add_ssh() { eval "$(ssh-agent -s)"; ssh-add ~/.ssh/id_rsa ; }
git config --global alias.sshify '!f() { git remote set-url origin $(git remote get-url origin | sed -En "s/https:\/\/github.com\//git@github.com:/p") ; }; f'
git config --global alias.unsshify '!f() { git remote set-url origin $(git remote get-url origin | sed -En "s/git@github.com:/https:\/\/github.com\//p") ; }; f'
git_print_log() { git log --graph --oneline --decorate --all ; }
vscode_dev_container() { bash <(curl -s https://raw.githubusercontent.com/shadow-robot/sr-build-tools/lint/ansible/roles/dev_machine/files/vs_code_setup.sh) ; }
aws_ecr_public() { aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/shadowrobot; }
aws_ecr_private() { aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 080653068785.dkr.ecr.eu-west-2.amazonaws.com; }
cd_ltr(){ cd $1$(ls $1 -ltr -d */ | tail -n 1 | awk '{print $9}'); }
cats() { for input_file in $@; do echo -e "${input_file}: \n"; highlight -O ansi --force $input_file; echo -e "\n"; done; }
catsn() { for input_file in $@; do echo -e "${input_file}: \n"; highlight -O ansi --force -n $input_file; echo -e "\n"; done; }
sr_diagnostics() { rostopic echo --filter "m.status[0].name == 'Realtime Control Loop'" /diagnostics; }
network_speed() { speedometer -l  -r $1 -t $1 -m $(( 1024 * 1024 * 3 / 2 )) ; }
alias cgrep="grep --color=always"
ps_aux() { ps aux | cgrep $1 | grep -v grep ; }
ps_aux_command() { ps -e -o command | cgrep $1 | grep -v grep ; }
kill_any_process() { ps_aux_command $1; conf="$(confirm "kill these processes? [Y/n]")"; if [[ $conf == "y" ]]; then echo "killing..."; sudo kill -9 $(ps_aux $1 | awk {'print $2}'); sleep 1; echo "remaining: "; ps_aux_command $1 else echo "not killing"; fi ; }
catkin_make_debug_release() { catkin_make -DCMAKE_BUILD_TYPE=RelWithDebInfo ; }
catkin_make_all_debug_release () { tmp_var=$(pwd); roscd; cd ..; catkin_make_debug_release; cd ../base_deps; catkin_make_debug_release ; cd $tmp_var;  }
initialise_container() {
  docker start $1
  id_rsa_to_container $1
  docker exec -it $1 bash -c "gosu user wget bit.ly/sr-qol -O /tmp/sr_qol && gosu user sudo chmod +x /tmp/sr_qol && gosu user bash /tmp/sr_qol -b true -g false"
}
docker_create() {
  while [[ $# > 1 ]]
  do
    key="$1"

    case $key in
      -g|--no_gpu)
        NO_GPU="$2"
        shift
        ;;	
      -c|--container_name)
        CONTAINER_NAME="$2"
        shift
        ;;			
      -i|--image)
        IMAGE="$2"
        shift
        ;;
      -b|--bash)
        BASH="$2"
        shift
        ;;
      -d|--dont_initialize)
        DONT_INITIALIZE="$2"
        shift
        ;;			
      *)
      # ignore unknown option
		  ;;
    esac
    shift
  done


  if [ -z "${CONTAINER_NAME}" ]; then echo "Please specify desired container name (-c)" ; return ; fi
  if [ -z "${IMAGE}" ]; then echo "Please specify image name (-i)" ; return ; fi

  if [ -z "${NO_GPU}" ]; then NO_GPU="false"; fi
  if [ -z "${BASH}" ]; then BASH="false"; fi
  if [ -z "${DONT_INITIALIZE}" ]; then DONT_INITIALIZE="false"; fi


  echo "Creating container $CONTAINER_NAME from image $IMAGE"
  if [[ $BASH == "true" ]]; then
    echo "Using bash as default shell"
    CONTAINER_COMMAND="bash"
  else
    echo "Using graphical terminator as default shell (pass in -b true to use bash instead)"
    CONTAINER_COMMAND="terminator"
  fi

  if [[ $NO_GPU == "false" ]]; then
    echo "Creating container with nvidia gpu support"
    docker create --name $CONTAINER_NAME -it --security-opt seccomp=unconfined \
                  --network=host --ipc=host --pid=host --privileged \
                  --gpus all -e NVIDIA_DRIVER_CAPABILITIES=all -e NVIDIA_VISIBLE_DEVICES=all \
                  -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) \
                  -e XDG_RUNTIME_DIR=/run/user/$(id -u) -e ROS_MASTER_URI=http://localhost:11311\
                  -v /tmp/.X11-unix:/tmp/.X11-unix:rw -v /dev/input:/dev/input:rw -v /dev:/dev \
                  -v /run/udev/data:/run/udev/data:rw ${IMAGE} ${CONTAINER_COMMAND}
  else
	  echo "Creating container without nvidia gpu support"
	  docker create --name $CONTAINER_NAME -it --security-opt seccomp=unconfined \
                  --network=host --ipc=host --pid=host --privileged \
                  -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) \
                  -e XDG_RUNTIME_DIR=/run/user/$(id -u) -e ROS_MASTER_URI=http://localhost:11311\
                  -v /tmp/.X11-unix:/tmp/.X11-unix:rw -v /dev/input:/dev/input:rw -v /dev:/dev \
                  -v /run/udev/data:/run/udev/data:rw ${IMAGE} ${CONTAINER_COMMAND}
  fi
  if [[ $DONT_INITIALIZE == "true" ]]; then
    return
  fi
  initialise_container $CONTAINER_NAME
}
aws_ecr_list_tags_by_repo() { echo "${1}:"; aws ecr list-images --repository-name $1 | jq '.imageIds[].imageTag'; echo; }
aws_ecr_list_repos() { aws ecr describe-repositories |  jq '.repositories[].repositoryName' | sed -r 's/"//g'; }
aws_ecr_list_all() { for img in $(aws_ecr_list_repos); do aws_ecr_list_tags_by_repo $img; done; }
